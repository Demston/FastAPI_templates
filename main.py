from fastapi import FastAPI, HTTPException
import uvicorn
from pydantic import BaseModel

app = FastAPI()
# uvicorn main:app --reload

books = [
    {
        'id': 1,
        'title': '–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –≤ –ü–∏—Ç–æ–Ω–µ',
        'author': 'Mathew'
    },
    {
        'id': 2,
        'title': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ü–∏—Ç–æ–Ω–µ',
        'author': 'Dmitry'
    }
]


@app.get('/books', summary='–ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥–∏', tags=['–ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥–∏ üìö'])
def read_books():
    return books


@app.get('/books/{book_id}', summary='–ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É', tags=['–Ω–∏–≥–∞'])
def get_book(book_id: int):
    for b in books:
        if b['id'] == book_id:
            return b
    raise HTTPException(status_code=404, detail='–Ω–µ—Ç –∫–Ω–∏–≥–∏')


class NewBook(BaseModel):
    title: str
    author: str


@app.post('/books', summary='–î–æ–±–∞–≤–∏—Ç—å –Ω–∏–≥–∏', tags=['–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥–∏ üìö'])
def create_book(new_book: NewBook):
    books.append({'id': len(books)+1,
                  'title': new_book.title,
                  'author': new_book.author})
    return {'success': True, 'message': '–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞'}


if __name__ == '__main__':
    uvicorn.run('main:app', reload=True)
