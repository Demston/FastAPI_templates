from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column
from sqlalchemy import select

from fastapi import FastAPI, Depends
from pydantic import BaseModel, Field
from typing import Annotated


app = FastAPI()

engine = create_async_engine('sqlite+aiosqlite:///books.db')

new_session = async_sessionmaker(engine, expire_on_commit=False)


async def get_session():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
    async with new_session() as session:
        yield session   # –æ—Ç–¥–∞—ë—Ç —Å–µ—Å—Å–∏—é –Ω–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Ä—É—á–∫–∏


SessionDep = Annotated[AsyncSession, Depends(get_session)]
# –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—Ä–æ—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–º–æ–∂–Ω–æ –∏ –±–µ–∑ —ç—Ç–æ–≥–æ)


class Base(DeclarativeBase):
    pass


class BookModel(Base):
    """–°–æ–∑–¥–∞–Ω–∏–µ/–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
    __tablename__ = 'books'
    id: Mapped[int] = mapped_column(primary_key=True)
    title: Mapped[str]
    author: Mapped[str]


@app.post('/setup_database', summary='–°–æ–∑–¥–∞—Ç—å –ë–î', tags=['–°–æ–∑–¥–∞—Ç—å –ë–î üíΩ'])
async def setup_database():
    """–°–æ–∑–¥–∞—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∏ —Ç–∞–±–ª–∏—Ü—ã"""
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)     # –æ—á–∏—Å—Ç–∏–º –±–∞–∑—É
        await conn.run_sync(Base.metadata.create_all)   # –¥–æ–±–∞–≤–∏–º —Ç–∞–±–ª–∏—Ü—ã
    return 'ok'


class BookAddSchema(BaseModel):
    title: str
    author: str


class BookSchema(BookAddSchema):
    id: int


class PaginationParams(BaseModel):
    limit: int = Field(5, description='–ö–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ')
    offset: int = Field(0, description='–°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏')


# –ü–∞–≥–∏–Ω–∞—Ü–∏—è: —á–µ–≥–æ –ø–æ —Å–∫–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–µ. –ú–æ–∂–Ω–æ —Å–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –º–æ–∂–Ω–æ - –Ω–µ—Ç.
# Depends - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
PaginationDep = Annotated[PaginationParams, Depends(PaginationParams)]


@app.post('/books', summary='–î–æ–±–∞–≤–∏—Ç—å', tags=['–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥–∏ üìö'])
async def add_books(data: BookAddSchema, session: SessionDep):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥–∏"""
    new_book = BookModel(title=data.title, author=data.author)  # –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ORM
    session.add(new_book)   # –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É
    await session.commit()
    return 'ok'


# @app.get('/books', summary='–ü–æ–∫–∞–∑–∞—Ç—å', tags=['–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ üìö'])
# async def get_books(session: SessionDep):
#     """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏"""
#     query = select(BookModel)   # –≤—ã–±—Ä–∞—Ç—å —á–µ—Ä–µ–∑ stlect
#     result = await session.execute(query)   # –∏—Å–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
#     return result.scalars().all()   # –≤–µ—Ä–Ω—É—Ç—å (–≤—Å–µ –∑–∞–ø–∏—Å–∏)


@app.get('/books', summary='–ü–æ–∫–∞–∑–∞—Ç—å', tags=['–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ üìö'])
async def get_books(session: SessionDep,
                    pagination: PaginationDep):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏. –£—Å—Ç–∞–Ω–æ–≤–∏–º –ª–∏–º–∏—Ç, –∞ —Ç–∞–∫–∂–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª"""
    query = select(BookModel).limit(pagination.limit).offset(pagination.offset)
    result = await session.execute(query)
    return result.scalars().all()
